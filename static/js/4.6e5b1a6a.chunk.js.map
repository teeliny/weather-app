{"version":3,"sources":["components/ErrorComponent.tsx","components/tempComponent/temp.style.ts","components/tempComponent/TempSelector.tsx","components/paginationComponent/PaginationArrows.tsx","components/weatherComponent/weather.style.ts","components/weatherComponent/WeatherBox.tsx","components/chartComponent/ChartComponent.tsx","pages/weatherPage/weatherPage.style.ts","pages/weatherPage/WeatherScreen.tsx"],"names":["ErrorComponent","message","Box","sx","width","height","border","borderRadius","position","display","flexDirection","justifyContent","alignItems","top","left","transform","padding","style","wordWrap","textAlign","Button","marginTop","variant","color","onClick","window","location","reload","TempWrapper","styled","div","TempSelector","value","handleChange","handleRefetch","myView","useAppSelector","state","screen","mobile_view","data-testid","FormControl","component","RadioGroup","row","aria-label","name","onChange","FormControlLabel","control","Radio","label","margin","right","textTransform","backgroundColor","PaginationArrows","handleLeft","handleRight","pageIndex","maxPage","Container","minWidth","paddingLeft","paddingRight","fontSize","opacity","CardWrapper","ImageWrapper","WeatherBox","id","temp","weather_name","weather_description","current_date","tempUnit","selectedDay","handleSelectDay","cursor","convertTemp","toFixed","src","fetchImageURL","alt","BarChart","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","ChartComponent","input","currentDate","barData","barLabel","index","length","hourString","hour","toString","push","timeFormats","options","maintainAspectRatio","responsive","scales","x","grid","tickColor","ticks","y","plugins","title","text","data","labels","datasets","Fragment","CardsWrapper","ChartWrapper","MainWrapper","WeatherScreen","appID","process","nigString","useState","queryString","setQueryString","errorMessage","setErrorMessage","setTempUnit","dataByDate","setDataByDate","responseData","setResponseData","displayData","setDisplayData","setBarData","pageSize","setPageSize","setPageIndex","setSelectedDay","navigator","geolocation","getCurrentPosition","res","coords","latitude","longitude","formedString","useFetchWeatherQuery","isFetching","isError","refetch","error","useEffect","requiredFields","availableDates","list","forEach","item","main","weather","wind","dt_txt","full_date","Date","getDate","months","getMonth","getFullYear","presentItem","humidity","wind_speed","speed","description","getHours","hasOwnProperty","dailyReports","map","availableDate","allReports","sum_temp","reduce","acc","cur","sum_humidity","sum_wind_speed","JSON","parse","stringify","sectionData","slice","e","preventDefault","currentTarget","target","Math","floor","singleData"],"mappings":"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","file":"static/js/4.6e5b1a6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nfunction ErrorComponent({ message }: {message: string}) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: 200,\r\n        height: 200,\r\n        border: '1px solid #f00',\r\n        borderRadius: '0.5rem',\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        padding: '0.5rem 1rem',\r\n      }}\r\n    >\r\n      <p style={{\r\n        wordWrap: 'break-word',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n      }}>{message}</p>\r\n      <Button \r\n        sx={{\r\n          width: '80px',\r\n          marginTop: '1rem',\r\n        }}\r\n        variant=\"outlined\" \r\n        color=\"error\"\r\n        onClick={() => window.location.reload()}\r\n      >\r\n        Refresh\r\n      </Button>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent;\r\n\r\n","import styled from '@emotion/styled';\r\n\r\nexport const TempWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 80%;\r\n  }\r\n  @media (min-width: 971px) {\r\n    width: 70%;\r\n  }\r\n`;\r\n","import FormControl from '@mui/material/FormControl';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\nimport Button from '@mui/material/Button';\r\nimport React from 'react';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { TempWrapper } from './temp.style';\r\nimport { ITempSelector } from './temp.typing';\r\n\r\n\r\nfunction TempSelector({ value, handleChange, handleRefetch }: ITempSelector) {\r\n  const myView = useAppSelector((state) => state.screen.mobile_view);\r\n\r\n  return (\r\n    <TempWrapper data-testid={'temp-control'}>\r\n      <FormControl component=\"fieldset\" sx={{ width: '100%' }}>\r\n        <RadioGroup\r\n          sx={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            justifyContent: myView ? 'space-between' : 'center',\r\n          }}\r\n          row={true}\r\n          aria-label=\"temp\"\r\n          name=\"row-radio-buttons-group\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          <FormControlLabel value=\"0\" control={<Radio />} label=\"Celsius\" />\r\n          <FormControlLabel\r\n            value=\"1\"\r\n            control={<Radio />}\r\n            label=\"Fahrenheit\"\r\n            sx={{ margin: 0 }}\r\n          />\r\n        </RadioGroup>\r\n        {!myView && (\r\n          <Button\r\n            sx={{\r\n              position: 'absolute',\r\n              right: '0',\r\n              textTransform: 'capitalize',\r\n              backgroundColor: '#ffffff',\r\n              border: '1px solid #0055ff',\r\n              color: '#0055ff',\r\n              width: '80px',\r\n            }}\r\n            onClick={handleRefetch}\r\n          >\r\n            Refresh\r\n          </Button>\r\n        )}\r\n      </FormControl>\r\n    </TempWrapper>\r\n  );\r\n}\r\n\r\nexport default TempSelector;\r\n","import React from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport ArrowCircleRightIcon from '@mui/icons-material/ArrowCircleRight';\r\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { IPaginationArrow } from './pagination.typing';\r\n\r\nfunction PaginationArrows({ handleLeft, handleRight, handleRefetch, pageIndex, maxPage }: IPaginationArrow) {\r\n  const myView = useAppSelector((state) => state.screen.mobile_view);\r\n  return (\r\n    <Container\r\n      sx={{\r\n        position: 'absolute',\r\n        top: myView ? '' : '175px',\r\n        minWidth: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingLeft: '0',\r\n        paddingRight: '0',\r\n        margin: '0',\r\n      }}\r\n    >\r\n      {\r\n        <ArrowCircleLeftIcon\r\n          sx={{ fontSize: 36.5, opacity: pageIndex === 1 ? '0.1' : '1' }}\r\n          onClick={handleLeft}\r\n        />\r\n      }\r\n      {myView && (\r\n        <Button\r\n          sx={{\r\n            textTransform: 'capitalize',\r\n            backgroundColor: '#ffffff',\r\n            border: '1px solid #0055ff',\r\n            color: '#0055ff',\r\n            width: '80px',\r\n          }}\r\n          onClick={handleRefetch}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      )}\r\n      {\r\n        <ArrowCircleRightIcon\r\n          sx={{ fontSize: 36.5, opacity: pageIndex === maxPage ? '0.1' : '1' }}\r\n          onClick={handleRight}\r\n        />\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PaginationArrows;\r\n\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CardWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n`;\r\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport { convertTemp, fetchImageURL } from '../../utils/formatter/basicFormatter';\r\nimport { CardWrapper, ImageWrapper } from './weather.style';\r\nimport { IWeatherBox } from './weather.typing';\r\n\r\nfunction WeatherBox({\r\n  id, \r\n  temp,\r\n  weather_name, \r\n  weather_description, \r\n  current_date,\r\n  tempUnit,\r\n  selectedDay,\r\n  handleSelectDay\r\n}: IWeatherBox) {\r\n  return (\r\n    <Box\r\n      data-testid={'single-box'}\r\n      id={id}\r\n      sx={{\r\n        width: 120,\r\n        height: 120,\r\n        margin: '0 auto',\r\n        padding: '1rem 2rem',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        border: selectedDay === id ? '2px solid #0055ff' : '1px solid #0055ff',\r\n        borderRadius: '0.5rem',\r\n        cursor: 'pointer',\r\n        backgroundColor: selectedDay === id ? '#d9e7ff' : '',\r\n        color: '#000000',\r\n      }}\r\n      onClick={handleSelectDay}\r\n    >\r\n      <p>Temperature</p>\r\n      <CardWrapper>\r\n        <p>\r\n          {convertTemp(tempUnit, temp).toFixed(2)}{' '}\r\n          {tempUnit === '0' ? 'C' : 'F'}\r\n        </p>\r\n        <ImageWrapper>\r\n          <img\r\n            src={fetchImageURL(weather_name, weather_description)}\r\n            alt=\"weather-icon\"\r\n            width=\"100%\"\r\n          />\r\n        </ImageWrapper>\r\n      </CardWrapper>\r\n      <p>{current_date}</p>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default WeatherBox;\r\n","import React from 'react';\r\nimport {\r\n  Chart as BarChart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { convertTemp, timeFormats } from '../../utils/formatter/basicFormatter';\r\nimport { IChartInput } from './chart.typing';\r\n\r\n\r\nBarChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n);\r\n\r\nfunction ChartComponent({ input, tempUnit }: IChartInput) {\r\n  const currentDate = input[0].current_date;\r\n  const barData = [];\r\n  const barLabel = [];\r\n  for (let index = 0; index < input.length; index++) {\r\n    const { temp, hour } = input[index];\r\n    const hourString: string = hour.toString();\r\n    barData.push((convertTemp(tempUnit, temp)).toFixed(2));\r\n    barLabel.push(timeFormats[hourString]);\r\n  }\r\n  const options = {\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          color: '#4eeb9c',\r\n          tickColor: '#0055ff',\r\n        },\r\n        ticks: {\r\n          color: '#0055ff',\r\n        },\r\n      },\r\n      y: {\r\n        grid: {\r\n          color: '#4eeb9c',\r\n          tickColor: '#0055ff',\r\n        },\r\n        ticks: {\r\n          color: '#0055ff',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: `Chart for ${currentDate} in ${tempUnit === '0' ? 'C' : 'F'}`,\r\n        color: '#0055ff',\r\n      },\r\n    },\r\n  };\r\n  const data = {\r\n    labels: barLabel,\r\n    datasets: [\r\n      {\r\n        data: barData,\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n      }\r\n    ],\r\n  }; \r\n  return (\r\n    <React.Fragment>\r\n      <Bar\r\n        options={options}\r\n        data={data}\r\n        height={280}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ChartComponent;\r\n\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CardsWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: '8px';\r\n  align-items: center;\r\n  margin: 3rem auto;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 80%;\r\n  }\r\n  @media (min-width: 971px) {\r\n    width: 70%;\r\n  }\r\n`;\r\n\r\nexport const ChartWrapper = styled.div`\r\n  height: 300px;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 60%;\r\n  }\r\n  @media (min-width: 971px) {\r\n    width: 40%;\r\n  }\r\n`;\r\n\r\nexport const MainWrapper = styled.div`\r\n  position: relative;\r\n  margin: 0 1rem;\r\n\r\n  @media (min-width: 769px) {\r\n    margin: 0 3rem;\r\n  }\r\n\r\n  @media (min-width: 1025px) {\r\n    margin: 0 10rem;\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ErrorComponent from '../../components/ErrorComponent';\r\nimport TempSelector from '../../components/tempComponent/TempSelector';\r\nimport PaginationArrows from '../../components/paginationComponent/PaginationArrows';\r\nimport WeatherBox from '../../components/weatherComponent/WeatherBox';\r\nimport { months } from '../../utils/formatter/basicFormatter';\r\nimport ChartComponent from '../../components/chartComponent/ChartComponent';\r\nimport { useFetchWeatherQuery } from '../../features/weather/weather-api-slice';\r\nimport LoadingComponent from '../loadingPage/LoadingScreen';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { IChartComp, IRequiredFields } from './weatherPage.typing';\r\nimport {\r\n  CardsWrapper,\r\n  ChartWrapper,\r\n  MainWrapper,\r\n} from './weatherPage.style';\r\n\r\nfunction WeatherScreen() {\r\n  const days = process.env.REACT_APP_DAYS_COUNT as string;\r\n  const appID = process.env.REACT_APP_WEATHER_KEY as string;\r\n  const cnt = +days * 8;\r\n  const nigString = `lat=6.537216&lon=3.3718272&APPID=${appID}&cnt=${cnt}`;\r\n\r\n  const myView = useAppSelector((state) => state.screen.mobile_view);\r\n  \r\n  const [queryString, setQueryString] = useState(nigString);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [tempUnit, setTempUnit] = useState<string>('0');\r\n  const [dataByDate, setDataByDate] = useState<IRequiredFields | null>(null);\r\n  const [responseData, setResponseData] = useState<IChartComp[]>([]);\r\n  const [displayData, setDisplayData] = useState<IChartComp[]>([]);\r\n  const [barData, setBarData] = useState<IChartComp[]>([]);\r\n  const [pageSize, setPageSize] = useState<number>(3);\r\n  const [pageIndex, setPageIndex] = useState<number>(1);\r\n  const [selectedDay, setSelectedDay] = useState<string>('');\r\n  // const screenWidth = useWindowSize();\r\n\r\n  // Access current position of user and store query string \r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((res) => {\r\n      const { latitude, longitude } = res.coords;\r\n      const formedString = `lat=${latitude}&lon=${longitude}&APPID=${appID}&cnt=${cnt}`;\r\n      setQueryString(formedString);\r\n    });\r\n  }\r\n\r\n  // Calling the Query to fetch weather data\r\n  const { data, isFetching, isError, refetch, error } = useFetchWeatherQuery(queryString);\r\n\r\n  // Access relevant info from weather info and store\r\n  useEffect(() => {\r\n    if (!isFetching && !isError) {\r\n      const requiredFields: IRequiredFields = {};\r\n      const availableDates: string[] = [];\r\n      \r\n      data.list.forEach(\r\n        (item: { main: any; weather: any; wind: any; dt_txt: string }) => {\r\n          const { main, weather, wind, dt_txt } = item;\r\n          // Create date in th format, dd month year\r\n          const full_date = new Date(dt_txt);\r\n          const current_date = `${full_date.getDate()} ${\r\n            months[full_date.getMonth()]\r\n          }. ${full_date.getFullYear()}`;\r\n          // Create a new info from item\r\n          const presentItem: IChartComp = {\r\n            temp: main.temp - 273,\r\n            humidity: main.humidity,\r\n            wind_speed: wind.speed,\r\n            weather_description: weather[0].description,\r\n            weather_name: weather[0].main,\r\n            hour: full_date.getHours(),\r\n            current_date,\r\n          };\r\n          // Check if this current date is already store in required object\r\n          if (requiredFields.hasOwnProperty(current_date)) {\r\n            requiredFields[current_date].push(presentItem);\r\n          } else {\r\n            availableDates.push(current_date);\r\n            requiredFields[current_date] = [presentItem];\r\n          }\r\n        },\r\n      );\r\n      const dailyReports = availableDates.map((availableDate) => {\r\n        const allReports = requiredFields[availableDate];\r\n        const sum_temp = allReports.reduce((acc, cur) => acc + cur.temp, 0);\r\n        const sum_humidity = allReports.reduce(\r\n          (acc, cur) => acc + cur.humidity,\r\n          0,\r\n        );\r\n        const sum_wind_speed = allReports.reduce(\r\n          (acc, cur) => acc + cur.wind_speed,\r\n          0,\r\n        );\r\n        return {\r\n          temp: sum_temp / allReports.length,\r\n          humidity: sum_humidity / allReports.length,\r\n          wind_speed: sum_wind_speed / allReports.length,\r\n          weather_description: allReports[0].weather_description,\r\n          weather_name: allReports[0].weather_name,\r\n          hour: allReports[0].hour,\r\n          current_date: allReports[0].current_date,\r\n        };\r\n      });\r\n      setResponseData(dailyReports);\r\n      setDataByDate(requiredFields);\r\n    }\r\n  }, [data, isError, isFetching]);\r\n\r\n  // Handle error from the query call\r\n  useEffect(() => {\r\n    if (error) {\r\n      const parsedError = JSON.parse(JSON.stringify(error));\r\n      if (!parsedError.data) {\r\n        setErrorMessage('Oops! Network Error. Check your network and try again.');\r\n      }\r\n      else {\r\n        setErrorMessage('Invalid query string supplied. Check the API key and try again');\r\n      }\r\n    }\r\n  }, [error]);\r\n\r\n  // Check screen size and use it to set page size\r\n  useEffect(() => {\r\n    if (!myView) {\r\n      setPageSize(3);\r\n    }\r\n    else {\r\n      setPageSize(1);\r\n    }\r\n  }, [myView]);\r\n\r\n  // Watch out for changes in the day selected from box and set bar data\r\n  useEffect(() => {\r\n    if (selectedDay.length > 0 && dataByDate) {\r\n      setBarData(dataByDate[selectedDay]);\r\n    }\r\n  }, [selectedDay, dataByDate]);\r\n\r\n  // Extract the data to display based on page index\r\n  useEffect(() => {\r\n    const sectionData = responseData.slice(pageSize * (pageIndex - 1), pageSize * pageIndex);\r\n    setDisplayData(sectionData);\r\n    if (sectionData[0]?.current_date) setSelectedDay(sectionData[0].current_date);\r\n  }, [pageIndex, pageSize, responseData]);\r\n\r\n  // Functions to handle clicks starts\r\n  const handleForwardArrow = () => {\r\n    if (pageIndex < Math.floor(responseData.length / pageSize)) {\r\n      setPageIndex(pageIndex + 1);\r\n    }\r\n  }\r\n  const handleBackwardArrow = () => {\r\n    if (pageIndex > 1) {\r\n      setPageIndex(pageIndex - 1);\r\n    }\r\n  }\r\n  const handleUnitChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setTempUnit(e.target.value);\r\n  }\r\n  const handleSelectDay = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    setSelectedDay(e.currentTarget.id);\r\n  }\r\n\r\n  const handleRefetch = () => {\r\n    refetch();\r\n  }\r\n  // End of functions to handle clicks\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {isFetching ? (\r\n        <LoadingComponent />\r\n      ) : isError ? (\r\n        <ErrorComponent message={errorMessage} />\r\n      ) : (\r\n        <MainWrapper>\r\n          <h1>Weather Forecast of your Location</h1>\r\n          <TempSelector\r\n            value={tempUnit}\r\n            handleChange={handleUnitChange}\r\n            handleRefetch={handleRefetch}\r\n          />\r\n          <PaginationArrows\r\n            handleLeft={handleBackwardArrow}\r\n            handleRight={handleForwardArrow}\r\n            handleRefetch={handleRefetch}\r\n            pageIndex={pageIndex}\r\n            maxPage={Math.floor(responseData.length / pageSize)}\r\n          />\r\n          <CardsWrapper>\r\n            {displayData.map((singleData) => (\r\n              <WeatherBox\r\n                key={singleData.current_date}\r\n                id={singleData.current_date}\r\n                temp={singleData.temp}\r\n                weather_name={singleData.weather_name}\r\n                weather_description={singleData.weather_description}\r\n                current_date={singleData.current_date}\r\n                tempUnit={tempUnit}\r\n                selectedDay={selectedDay}\r\n                handleSelectDay={handleSelectDay}\r\n              />\r\n            ))}\r\n          </CardsWrapper>\r\n          <ChartWrapper>\r\n            {barData.length > 0 && (\r\n              <ChartComponent input={barData} tempUnit={tempUnit} />\r\n            )}\r\n          </ChartWrapper>\r\n        </MainWrapper>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default WeatherScreen;\r\n"],"sourceRoot":""}
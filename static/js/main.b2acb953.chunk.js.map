{"version":3,"sources":["features/weather/weather-api-slice.ts","app/hooks.ts","utils/formatter/basicFormatter.ts","pages/loadingPage/LoadingScreen.tsx","features/screen/screen-width-slice.ts","app/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchWeather","query","queryString","useFetchWeatherQuery","useAppDispatch","useDispatch","useAppSelector","useSelector","months","timeFormats","imgObjects","process","clouds","foggy","snow","storm","sunny","wind","fetchImageURL","name","description","toLowerCase","check","Object","keys","i","length","includes","convertTemp","tempUnit","temp","useWindowSize","useState","width","setWidth","useLayoutEffect","updateWidth","window","innerWidth","addEventListener","removeEventListener","LoadingComponent","data-testid","sx","display","justifyContent","alignItems","height","screenSlice","createSlice","initialState","mobile_view","reducers","toggleView","state","action","payload","actions","store","configureStore","reducer","screen","screenReducer","middleware","getDefaultMiddleware","concat","WeatherScreen","lazy","App","dispatch","screenWidth","useEffect","Fragment","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2acb953.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://api.openweathermap.org/data/2.5',\r\n  }),\r\n  endpoints(builder) {\r\n    return {\r\n      // fetchBreeds: builder.query<Breed[], number | void>({\r\n      fetchWeather: builder.query({\r\n        query(queryString) {\r\n          return `/forecast?${queryString}`\r\n        }\r\n      })\r\n    };\r\n  },\r\n});\r\n\r\nexport const { useFetchWeatherQuery } = apiSlice;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useState, useLayoutEffect } from 'react';\r\nimport {\r\n  IChartComp,\r\n  IRequiredFields,\r\n  IIntervalFormatter,\r\n} from './formatter.typing';\r\n\r\nexport const months = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sept',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n];\r\n\r\n// Time format for chart \r\nexport const timeFormats: { [key: string]: string } = {\r\n  '0': '12:00 AM',\r\n  '3': '03:00 AM',\r\n  '6': '06:00 AM',\r\n  '9': '09:00 AM',\r\n  '12': '12:00 PM',\r\n  '15': '03:00 PM',\r\n  '18': '06:00 PM',\r\n  '21': '09:00 PM',\r\n};\r\n\r\nconst imgObjects: { [key: string]: string } = {\r\n  'broken clouds': `${process.env.PUBLIC_URL}/assets/img/broken-cloud.jpg`,\r\n  'clear sky': `${process.env.PUBLIC_URL}/assets/img/clear-sky.JPG`,\r\n  clouds: `${process.env.PUBLIC_URL}/assets/img/cloudy.JPG`,\r\n  'few clouds': `${process.env.PUBLIC_URL}/assets/img/few-cloud.JPG`,\r\n  foggy: `${process.env.PUBLIC_URL}/assets/img/foggy.JPG`,\r\n  'heavy rain': `${process.env.PUBLIC_URL}/assets/img/heavy-rain.JPG`,\r\n  'light rain': `${process.env.PUBLIC_URL}/assets/img/light-rain.JPG`,\r\n  'light snow': `${process.env.PUBLIC_URL}/assets/img/light-snow.JPG`,\r\n  'most snow': `${process.env.PUBLIC_URL}/assets/img/most-snow.JPG`,\r\n  'mostly sunny': `${process.env.PUBLIC_URL}/assets/img/mostly-sunny.JPG`,\r\n  'overcast clouds': `${process.env.PUBLIC_URL}/assets/img/overcast-cloud.JPG`,\r\n  'partly clouds': `${process.env.PUBLIC_URL}/assets/img/partly-cloud.JPG`,\r\n  'scatter clouds': `${process.env.PUBLIC_URL}/assets/img/scatter-cloud.JPG`,\r\n  snow: `${process.env.PUBLIC_URL}/assets/img/snow.JPG`,\r\n  storm: `${process.env.PUBLIC_URL}/assets/img/storm.JPG`,\r\n  sunny: `${process.env.PUBLIC_URL}/assets/img/sunny.JPG`,\r\n  wind: `${process.env.PUBLIC_URL}/assets/img/wind.JPG`,\r\n};\r\n\r\nexport function fetchImageURL(name: string, description: string) {\r\n  if (imgObjects[description.toLowerCase()]) {\r\n    return imgObjects[description.toLowerCase()];\r\n  }\r\n  else {\r\n    const check = Object.keys(imgObjects);\r\n    for (let i = 0; i < check.length; i++) {\r\n      if ((check[i].toLowerCase()).includes(name.toLowerCase())) {\r\n        return imgObjects[check[i]];\r\n      }\r\n    }\r\n    return imgObjects['cloudy'];\r\n  }\r\n}\r\n\r\n// Function to covert temp to Fahrenheit\r\nexport function convertTemp(tempUnit: string, temp: number) {\r\n  if (tempUnit === '1') {\r\n    return ((9 * temp / 5) + 32);\r\n  }\r\n  else return temp;\r\n}\r\n\r\n// Function to format and extract necessary fields from response data\r\nexport function intervalFormatter(input: IIntervalFormatter[]) {\r\n  const requiredFields: IRequiredFields = {};\r\n  input.forEach((item) => {\r\n    const { main, weather, wind, dt_txt } = item;\r\n    // Create date in th format, dd month year\r\n    const full_date = new Date(dt_txt);\r\n    const current_date = `${full_date.getDate()} ${\r\n      months[full_date.getMonth()]\r\n    }. ${full_date.getFullYear()}`;\r\n    // Create a new info from item\r\n    const presentItem: IChartComp = {\r\n      temp: main.temp,\r\n      humidity: main.humidity,\r\n      wind_speed: wind.speed,\r\n      cloud: weather[0].description,\r\n      hour: full_date.getHours(),\r\n      current_date,\r\n    };\r\n    // Check if this current date is already store in required object\r\n    if (requiredFields.hasOwnProperty(current_date)) {\r\n      requiredFields[current_date].push(presentItem);\r\n    } else {\r\n      requiredFields[current_date] = [presentItem];\r\n    }\r\n  });\r\n  return requiredFields;\r\n}\r\n\r\n// Function to monitor window width\r\nexport function useWindowSize() {\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useLayoutEffect(() => {\r\n    function updateWidth() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n    window.addEventListener('resize', updateWidth);\r\n    updateWidth();\r\n    return () => window.removeEventListener('resize', updateWidth);\r\n  }, [])\r\n  return width;\r\n}","import React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nfunction LoadingComponent() {\r\n  return (\r\n    <Container\r\n      data-testid=\"loading\"\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <CircularProgress />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default LoadingComponent;\r\n\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { SizeState } from './screen.typing';\r\n\r\nconst initialState: SizeState = {\r\n  mobile_view: false,\r\n};\r\n\r\nconst screenSlice = createSlice({\r\n  name: 'screen',\r\n  initialState,\r\n  reducers: {\r\n    toggleView(state, action: PayloadAction<boolean>) {\r\n      state.mobile_view = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleView } = screenSlice.actions;\r\nexport default screenSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport {  apiSlice } from '../features/weather/weather-api-slice';\r\nimport screenReducer from '../features/screen/screen-width-slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    screen: screenReducer,\r\n    [apiSlice.reducerPath]: apiSlice.reducer\r\n  },\r\n  middleware: (getDefaultMiddleware) => {\r\n    return getDefaultMiddleware().concat(apiSlice.middleware);\r\n  }\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React, { lazy, Suspense, useEffect } from 'react';\nimport LoadingComponent from './pages/loadingPage/LoadingScreen';\nimport { useAppDispatch } from './app/hooks';\nimport { toggleView } from './features/screen/screen-width-slice';\nimport { useWindowSize } from './utils/formatter/basicFormatter';\n\nconst WeatherScreen = lazy(() => import('./pages/weatherPage/WeatherScreen'));\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const screenWidth = useWindowSize();\n\n  // Check screen size and use it to set page size\n  useEffect(() => {\n    if (screenWidth > 768) {\n      dispatch(toggleView(false));\n    } else {\n      dispatch(toggleView(true));\n    }\n  }, [dispatch, screenWidth]);\n  return (\n    <React.Fragment>\n      <Suspense fallback={<LoadingComponent />}>\n        <WeatherScreen />\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}